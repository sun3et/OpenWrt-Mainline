
name: OpenWrt Builder

on:
  repository_dispatch:
    types: [Source Code Updater]
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH Connection To Actions'
        type: boolean
        required: false
        default: false

env:
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: Read repo.json
        id: repojson
        run: |
          echo "REPO_URL=$(jq -r '.repo_url' repo.json)" >> $GITHUB_ENV
          echo "REPO_BRANCH=$(jq -r '.repo_branch' repo.json)" >> $GITHUB_ENV

      - name: Clone Source Code
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Cache
        uses: klever1988/cachewrtbuild@main
        with:
          ccache: true
          prefix: ${{ github.workspace }}/openwrt

      - name: Load Custom Feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update And Install Feeds
        run: cd openwrt && ./scripts/feeds update -a && ./scripts/feeds install -a

      - name: Load Custom Configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: SSH Connection To Actions
        uses: P3TERX/ssh2actions@main
        if: github.event.inputs.ssh == 'true'

      - name: Download Package
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile The Firmware
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s

      - name: Check Space Usage
        if: (!cancelled())
        run: df -hT

      - name: Organize Files
        id: organize
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "STATUS=success" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y.%m.%d_%H%M")" >> $GITHUB_ENV

      - name: Upload Firmware To Artifact
        uses: actions/upload-artifact@main
        if: env.STATUS == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        with:
          name: OpenWrt-${{ env.REPO_BRANCH }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Upload Firmware To Release
        uses: softprops/action-gh-release@master
        if: env.STATUS == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
        env:
          token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
        with:
          tag_name: OpenWrt-${{ env.REPO_BRANCH }}${{ env.FILE_DATE }}
          files: ${{ env.FIRMWARE }}/*

      - name: Delete Expired Workflows
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 0
          keep_minimum_runs: 1
          delete_workflow_pattern: openwrt-builder.yml

      - name: Delete Expired Releases
        uses: dev-drprasad/delete-older-releases@master
        if: env.STATUS == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 2
          delete_tags: true
          delete_tag_pattern: ${{ env.REPO_BRANCH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
